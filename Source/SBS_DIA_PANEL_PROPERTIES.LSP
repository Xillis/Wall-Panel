;;Panal dialog inishilaization 
(defun SBS_PANEL_INFO ( PASSTHROUGH / PANEL-INFO PASSTHROUGH)
	(print "Start SBS-PANEL-INFO")
	(if (null (setq PANEL-INFO (assoc "Panel info" PASSTHROUGH)))
		(setq PANEL-INFO (car (CWL-START-DIA "SBS_PANEL" "S" PANEL-INFO)))
	)
	(print Panel-info)
	(print (nth 2 (car (CWL-BITTOLIST (cadr PANEL-INFO) "SBS-PANEL-INFO" ))))
	(setq PANEL-INFO
		(CWL-START-DIA 
			(nth 2 (car (CWL-BITTOLIST (cadr PANEL-INFO) "SBS-PANEL-INFO" )))
			"M"
			(list PANEL-INFO)
		)
	)
	(print Panel-info)
	(print "End SBS-PANEL-INFO")
	(if (assoc "Panel info" PASSTHROUGH)
		(subst PANEL-INFO (assoc "Panel info" PASSTHROUGH) PASSTHROUGH)
		(cons PANEL-INFO PASSTHROUGH)
	)
)

;; panel selection dialog Box
(defun SBS_PANEL ( PANEL-INFO / PANEL-INFO TOKEN)
(print "Start SBS_PANEL")
	(CWL-DBLIST (CWL-BITTOLIST "all" "SBS-PANEL-INFO") "Panel_type" 1 "s")
	(action_tile "Panel_type" "(setq TOKEN (nth (1-(atoi $value)) (CWL-BITTOLIST \"all\" \"SBS-PANEL-INFO\")))")
	(action_tile "accept" "(setq PANEL-INFO (list \"Panel info\" (car TOKEN))) (done_dialog)")
	(mode_tile "PPanel" 1)
	(start_dialog)
(print "End SBS_PANEL")
(list PANEL-INFO)
)

;;Panel information collection dialog Box
(defun SBS_STD_PANEL ( PANEL-INFO / PANEL-TYPE COUNT MASK DFLAG)
(print "Start SBS_STD_PANEL")
	(setq PANEL-TYPE (car (CWL-BITTOLIST (cadr (car PANEL-INFO)) "SBS-PANEL-INFO")))
	(print PANEL-TYPE)
	(print (nth 3 PANEL-TYPE))
	(SBS_LIST_SET "Panel_type" (car PANEL-TYPE) "all" "SBS-PANEL-INFO")
	(SBS_RESET_LIST '("Width" "Gauge" "Profile") (nth 3 PANEL-TYPE) (cadr PANEL-TYPE) (cadr (car PANEL-INFO)))
	(SBS_RESET_LIST '("Colour") (nth 4 PANEL-TYPE) "COLOUR_CHART" 0)
	(SBS_RESET_LIST '("Feature_list") (nth 3 (nth 3 PANEL-TYPE)) (cadr PANEL-TYPE) (cadr (car PANEL-INFO)))
	(setq DFLAG (start_dialog))
(print "end SBS_STD_PANEL")
	(cons (list "Flag" DFLAG) (list PANEL-INFO))
)
;;resets a list of lists for dialogs
(defun SBS_RESET_LIST (TILE-LIST MASK-LIST DATA-LIST PANEL-BIT / COUNT )
(print "Start SBS_RESET_LIST")
(print TILE-LIST)
	(COND
		((= (CAR TILE-LIST) "Colour")
		(start_list (CAR TILE-LIST))
		(mapcar 'add_list 
			(mapcar 
				'(lambda (i)
					(strcat (cadr i) " " (caddr i))
				)
				(CWL-BITTOLIST	(car MASK-LIST) "Colour_Chart")
			)
		)
		(end_list)
		)
		((= (CAR TILE-LIST) "Feature_list")
		(print mask-list)
		(print tile-list)
		(print (CWL-BITTOLIST MASK-LIST DATA-LIST))
		;;(CWL_DBLIST (CWL-BITTOLIST MASK-LIST DATA-LIST) (car TILE-LIST) 1 )
		)
		(t 	(setq COUNT 0)
		(print "1")
			(foreach x TILE-LIST
			(print panel-bit)
			(print mask-list)
			(print (logand PANEL-BIT (nth COUNT MASK-LIST)))
			(print (nth COUNT MASK-LIST))
				(SBS_LIST_SET x (logand PANEL-BIT (nth COUNT MASK-LIST)) (nth COUNT MASK-LIST) DATA-LIST)
				(SETQ COUNT (1+ COUNT))
			)
		)
	)
	(print "End SBS_RESET_LIST")
)


;;generates a dropdown list and sets it to a value is Valu bit is provided
(defun SBS_LIST_SET (TILE-MARK SET-BIT MASK-BIT LIST-DATA / )
(print "start SBS_LIST_SET")
	(CWL_LIST_LENGHT_CHECK (CWL-BITTOLIST MASK-BIT LIST-DATA) TILE-MARK 1 )
	(PRINT SET-BIT)
	(if (not (zerop SET-BIT))
		(set_tile TILE-MARK
			(itoa (1+ (atoi (CWL-TILESET SET-BIT MASK-BIT LIST-DATA))))
		)
	)
(print "end SBS_LIST_SET")
)